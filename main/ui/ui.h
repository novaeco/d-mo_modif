// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.5.0
// LVGL version: 8.3.11
// Project name: sq_ui

#ifndef _SQ_UI_UI_H
#define _SQ_UI_UI_H

#ifdef __cplusplus
extern "C" {
#endif

#include "lvgl.h"
#include "ui_events.h"  // Event handlers for UI components
#include "ui_helpers.h" // Helper functions for UI components

// SCREEN: ui_Login
// Initializes the Login screen
void ui_Login_screen_init(void);

// UI objects for the Login screen
extern lv_obj_t* ui_Login;          // Main object for the Login screen
extern lv_obj_t* ui_Login_Panel1;   // Panel containing login components
extern lv_obj_t* ui_Login_Keyboard; // Virtual keyboard for text input
extern lv_obj_t* ui_Login_Panel2;   // Secondary panel on the Login screen

// Event handler for Login Label0
void ui_event_Login_Label0(lv_event_t* e);
extern lv_obj_t* ui_Login_Label0; // Label for displaying information
extern lv_obj_t* ui_Login_Label1; // Additional label for text
extern lv_obj_t* ui_Login_Label2; // Label for instructions

// Event handlers for user input fields
void ui_event_Login_InputUser(lv_event_t* e);
extern lv_obj_t* ui_Login_InputUser; // Input field for username
void ui_event_Login_InputPass(lv_event_t* e);
extern lv_obj_t* ui_Login_InputPass; // Input field for password
void ui_event_Login_InputPass_EYE(lv_event_t* e);
extern lv_obj_t* ui_Login_InputPass_EYE; // Icon/button for toggling password visibility

extern lv_obj_t* ui_Login_Panel3; // Panel containing additional controls
extern lv_obj_t* ui_Login_Label3; // Label for secondary information

// CUSTOM VARIABLES
#include <stdio.h>

// Flag indicating whether the password input is visible (1 for visible)
extern bool WIFI_INPUT_PWD_FLAG;

// Maximum length for username and password fields
#define MAX_LENGTH 32

// Buffers for storing and processing login information
extern char saved_username[];   // Stored username
extern char saved_password[];   // Stored password
extern char entered_username[]; // Username entered by the user
extern char entered_password[]; // Password entered by the user

// SCREEN: ui_Create_Uesr
// Initializes the Create User screen
void ui_Create_Uesr_screen_init(void);

// UI objects for the Create User screen
extern lv_obj_t* ui_Create_Uesr;        // Main object for the Create User screen
extern lv_obj_t* ui_Create_Uesr_Panel0; // Panel containing user creation components
extern lv_obj_t* ui_Create_Uesr_Label0; // Label for title or instructions
extern lv_obj_t* ui_Create_Uesr_Label1; // Additional label for text

// Event handlers for input fields and buttons
void ui_event_Create_Uesr_Name(lv_event_t* e);
extern lv_obj_t* ui_Create_Uesr_Name; // Input field for username
void ui_event_Create_Uesr_Password(lv_event_t* e);
extern lv_obj_t* ui_Create_Uesr_Password; // Input field for password
void ui_event_Create_Uesr_Pwd_EYE(lv_event_t* e);
extern lv_obj_t* ui_Create_Uesr_Pwd_EYE;   // Icon/button for toggling password visibility
extern lv_obj_t* ui_Create_Uesr_Keyboard0; // Virtual keyboard for text input
void ui_event_Create_Uesr_Button0(lv_event_t* e);
extern lv_obj_t* ui_Create_Uesr_Button0; // Button for submitting user data
extern lv_obj_t* ui_Create_Uesr_Label2;  // Label for feedback or status
extern lv_obj_t* ui_Create_Uesr_Label3;  // Additional feedback label

// CUSTOM VARIABLES
extern bool WIFI_Create_PWD_FLAG; // Flag for password visibility in Create User screen

// SCREEN: ui_Main_screen_init
// Initializes the Main screen
void ui_Main_screen_init(void);

// UI objects for the Main screen
extern lv_obj_t* ui_Main; // Main object for the Main screen
void ui_event_Wifi(lv_event_t* e);
extern lv_obj_t* ui_Wifi;        // Button or object for WiFi settings
extern lv_obj_t* ui_Wifi_Label0; // Label for WiFi information
void ui_event_RS485(lv_event_t* e);
extern lv_obj_t* ui_RS485;        // Button or object for RS485 settings
extern lv_obj_t* ui_RS485_Label0; // Label for RS485 information
void ui_event_CAN(lv_event_t* e);
extern lv_obj_t* ui_CAN;        // Button or object for CAN settings
extern lv_obj_t* ui_CAN_Label0; // Label for CAN information
void ui_event_PWM(lv_event_t* e);
extern lv_obj_t* ui_PWM;         // Button or object for PWM settings
extern lv_obj_t* ui_PWM_Label10; // Label for PWM information

// SCREEN: ui_Main_RS485_screen_init
// Initializes the RS485 settings screen
void ui_Main_RS485_screen_init(void);

// UI objects for the RS485 settings screen
extern lv_obj_t* ui_Main_RS485; // Main object for RS485 screen
void ui_event_RS485_Button1(lv_event_t* e);
extern lv_obj_t* ui_RS485_Button1;   // Button for sending RS485 data
extern lv_obj_t* ui_RS485_Label1;    // Label for RS485 status
extern lv_obj_t* ui_RS485_Keyboard1; // Virtual keyboard for RS485 input
extern lv_obj_t* ui_RS485_Send;      // Object for sending RS485 commands
extern lv_obj_t* ui_RS485_Send_Box;  // Text box for entering RS485 data
void ui_event_RS485_Send_Area(lv_event_t* e);
extern lv_obj_t* ui_RS485_Send_Area; // Area for displaying RS485 data
void ui_event_RS485_Button3(lv_event_t* e);
extern lv_obj_t* ui_RS485_Button3; // Button for clearing RS485 data
extern lv_obj_t* ui_RS485_Label3;  // Label for feedback
void ui_event_RS485_Button4(lv_event_t* e);
extern lv_obj_t* ui_RS485_Button4;   // Button for additional RS485 operations
extern lv_obj_t* ui_RS485_Label4;    // Label for operation status
extern lv_obj_t* ui_RS485_Read;      // Object for receiving RS485 data
extern lv_obj_t* ui_RS485_Read_Area; // Area for displaying received data
extern lv_obj_t* ui_RS485_Read_Box;  // Text box for received RS485 data
void ui_event_RS485_Button2(lv_event_t* e);
extern lv_obj_t* ui_RS485_Button2; // Button for sending additional RS485 commands
extern lv_obj_t* ui_RS485_Label2;  // Label for RS485 feedback
extern lv_obj_t* ui_RS485_Roller1; // Roller object for RS485 configuration

// CUSTOM VARIABLES
extern bool RS485_Clear;        // Flag for clearing RS485 data
extern uint32_t RS485_BaudRate; // Baud rate for RS485 communication

// SCREEN: ui_Main_CAN
void ui_Main_CAN_screen_init(void);         // Initialize the Main CAN screen
extern lv_obj_t* ui_Main_CAN;               // Main object for Main CAN screen
void ui_event_CAN_Button1(lv_event_t* e);   // Event handler for Button1 on CAN screen
extern lv_obj_t* ui_CAN_Button1;            // Button1 object on CAN screen
extern lv_obj_t* ui_CAN_Label1;             // Label1 object on CAN screen
extern lv_obj_t* ui_CAN_Keyboard0;          // Keyboard object on CAN screen
extern lv_obj_t* ui_CAN_Send1;              // Send button object on CAN screen
extern lv_obj_t* ui_CAN_Send_Box;           // Textbox for sending data on CAN screen
void ui_event_CAN_Send_ID(lv_event_t* e);   // Event handler for Send ID input
extern lv_obj_t* ui_CAN_Send_ID;            // Input box for CAN ID
void ui_event_CAN_Send_Len(lv_event_t* e);  // Event handler for Data Length input
extern lv_obj_t* ui_CAN_Send_Len;           // Input box for Data Length
void ui_event_CAN_Send_Data(lv_event_t* e); // Event handler for Data input
extern lv_obj_t* ui_CAN_Send_Data;          // Input box for Data
void ui_event_CAN_Button2(lv_event_t* e);   // Event handler for Button2 on CAN screen
extern lv_obj_t* ui_CAN_Button2;            // Button2 object on CAN screen
extern lv_obj_t* ui_CAN_Label2;             // Label2 object on CAN screen
void ui_event_CAN_Button3(lv_event_t* e);   // Event handler for Button3 on CAN screen
extern lv_obj_t* ui_CAN_Button3;            // Button3 object on CAN screen
extern lv_obj_t* ui_CAN_Label3;             // Label3 object on CAN screen
extern lv_obj_t* ui_CAN_Read1;              // Read button object on CAN screen
extern lv_obj_t* ui_CAN_Read_Area;          // Display area for received data
extern lv_obj_t* ui_CAN_Read_Box;           // Textbox for displaying received data
void ui_event_CAN_Button4(lv_event_t* e);   // Event handler for Button4 on CAN screen
extern lv_obj_t* ui_CAN_Button4;            // Button4 object on CAN screen
extern lv_obj_t* ui_CAN_Label4;             // Label4 object on CAN screen
extern lv_obj_t* ui_CAN_Roller;             // Roller object on CAN screen for additional selection
// CUSTOM VARIABLES
extern bool CAN_Clear; // Flag for clearing CAN screen

// SCREEN: ui_Main_PWM
void ui_Main_PWM_screen_init(void);    // Initialize the Main PWM screen
extern lv_obj_t* ui_Main_PWM;          // Main object for Main PWM screen
extern lv_obj_t* ui_PWM_Panel1;        // Panel1 object on PWM screen
void ui_event_PWM_Arc0(lv_event_t* e); // Event handler for Arc0 on PWM screen
extern lv_obj_t* ui_PWM_Arc0;          // Arc object for PWM display
extern lv_obj_t* ui_PWM_Label0;        // Label0 object on PWM screen
extern lv_obj_t* ui_PWM_Label9;
extern lv_obj_t* ui_BAT_Label0;
extern lv_obj_t* ui_PWM_Panel2;           // Panel2 object on PWM screen
void ui_event_PWM_Slider0(lv_event_t* e); // Event handler for Slider0 on PWM screen
extern lv_obj_t* ui_PWM_Slider0;          // Slider object for PWM adjustment
extern lv_obj_t* ui_PWM_Label1;           // Label1 object on PWM screen
extern lv_obj_t* ui_PWM_Panel3;           // Panel3 object on PWM screen
void ui_event_PWM_Switch1(lv_event_t* e); // Event handler for Switch1 on PWM screen
extern lv_obj_t* ui_PWM_Switch1;          // Switch1 object on PWM screen
void ui_event_PWM_Switch2(lv_event_t* e); // Event handler for Switch2 on PWM screen
extern lv_obj_t* ui_PWM_Switch2;          // Switch2 object on PWM screen
void ui_event_PWM_Switch3(lv_event_t* e); // Event handler for Switch3 on PWM screen
extern lv_obj_t* ui_PWM_Switch3;          // Switch3 object on PWM screen
extern lv_obj_t* ui_PWM_Label2;           // Label2 object on PWM screen
extern lv_obj_t* ui_PWM_Label3;           // Label3 object on PWM screen
extern lv_obj_t* ui_PWM_Label4;           // Label4 object on PWM screen
extern lv_obj_t* ui_PWM_Panel4;           // Panel4 object on PWM screen
extern lv_obj_t* ui_PWM_Label5;           // Label5 object on PWM screen
extern lv_obj_t* ui_PWM_Label6;           // Label6 object on PWM screen
extern lv_obj_t* ui_PWM_Label7;           // Label7 object on PWM screen
void ui_event_PWM_Button0(lv_event_t* e); // Event handler for Button0 on PWM screen
extern lv_obj_t* ui_PWM_Button0;          // Button0 object on PWM screen
extern lv_obj_t* ui_PWM_Label8;           // Label8 object on PWM screen
// CUSTOM VARIABLES

// SCREEN: ui_Main_WIFI
void ui_Main_WIFI_screen_init(void);                 // Initialize the Main WIFI screen
extern lv_obj_t* ui_Main_WIFI;                       // Main object for Main WIFI screen
extern lv_obj_t* ui_WIFI;                            // WIFI panel object
extern lv_obj_t* ui_WIFI_STA;                        // WIFI Station object
extern lv_obj_t* ui_WIFI_SCAN_STA;                   // WIFI Scan Station object
void ui_event_WIFI_Button0(lv_event_t* e);           // Event handler for Button0 on WIFI screen
extern lv_obj_t* ui_WIFI_Button0;                    // Button0 object on WIFI screen
extern lv_obj_t* ui_WIFI_Label0;                     // Label0 object on WIFI screen
void ui_event_WIFI_OPEN(lv_event_t* e);              // Event handler for WIFI open action
extern lv_obj_t* ui_WIFI_OPEN;                       // Open WIFI object
extern lv_obj_t* ui_WIFI_STA_Label;                  // WIFI Station label object
extern lv_obj_t* ui_WIFI_List_Win;                   // WIFI List window object
extern lv_obj_t* ui_WIFI_Spinner;                    // Spinner object for scanning WIFI
extern lv_obj_t* ui_WIFI_Details_Win;                // WIFI details window object
extern lv_obj_t* ui_WIFI_Name;                       // WIFI Name label object
extern lv_obj_t* ui_WIFI_Aurhmode;                   // Authentication mode label object
extern lv_obj_t* ui_WIFI_Pairwise;                   // Pairwise label object
extern lv_obj_t* ui_WIFI_Group;                      // Group label object
extern lv_obj_t* ui_WIFI_Channel;                    // Channel label object
extern lv_obj_t* ui_WIFI_IP;                         // IP address label object
void ui_event_WIFI_Connection_BUTTON(lv_event_t* e); // Event handler for WIFI connection button
extern lv_obj_t* ui_WIFI_Connection_BUTTON;          // WIFI connection button object
extern lv_obj_t* ui_Connection;                      // Connection status label object
void ui_event_WIFI_INPUT_PWD(lv_event_t* e);         // Event handler for WIFI password input
extern lv_obj_t* ui_WIFI_INPUT_PWD;                  // WIFI password input object
void ui_event_WIFI_EYE(lv_event_t* e);               // Event handler for showing/hiding password
extern lv_obj_t* ui_WIFI_EYE;                        // Eye icon for password visibility
extern lv_obj_t* ui_WIFI_INPUT_KEYBOARD;             // Keyboard object for password input
extern lv_obj_t* ui_WIFI_Wait_CONNECTION;            // Waiting for connection label object
extern lv_obj_t* ui_WIFI_PWD_Error;                  // WIFI password error label object

extern lv_obj_t* ui_WIFI_AP;                   // WIFI AP object
extern lv_obj_t* ui_WIFI_OPEN_AP_;             // Open AP object
void ui_event_WIFI_Button2(lv_event_t* e);     // Event handler for Button2 on WIFI AP screen
extern lv_obj_t* ui_WIFI_Button2;              // Button2 object on WIFI AP screen
extern lv_obj_t* ui_WIFI_Label2;               // Label2 object on WIFI AP screen
void ui_event_WIFI_AP_OPEN(lv_event_t* e);     // Event handler for opening WIFI AP
extern lv_obj_t* ui_WIFI_AP_OPEN;              // Open AP object on WIFI AP screen
extern lv_obj_t* ui_WIFI_AP_INPUT_ERROR;       // Error input object on WIFI AP screen
extern lv_obj_t* ui_WIFI_AP_Information;       // AP Information object
void ui_event_WIFI_AP_NAME(lv_event_t* e);     // Event handler for AP name input
extern lv_obj_t* ui_WIFI_AP_NAME;              // AP name input object
void ui_event_WIFI_AP_Password(lv_event_t* e); // Event handler for AP password input
extern lv_obj_t* ui_WIFI_AP_Password;          // AP password input object
void ui_event_WIFI_AP_EYE(lv_event_t* e);      // Event handler for showing/hiding AP password
extern lv_obj_t* ui_WIFI_AP_EYE;               // Eye icon for AP password visibility
void ui_event_WIFI_AP_Channel(lv_event_t* e);  // Event handler for AP channel input
extern lv_obj_t* ui_WIFI_AP_Channel;           // AP channel input object
extern lv_obj_t* ui_WIFI_AP_NAME_Label;        // AP name label
extern lv_obj_t* ui_WIFI_AP_PWD_Label;         // AP password label
extern lv_obj_t* ui_WIFI_AP_Channel_Label;     // AP channel label
extern lv_obj_t* ui_WIFI_AP_MAC_ADDR;          // AP MAC address label
extern lv_obj_t* ui_WIFI_AP_CON_NUM;           // AP connection number label
extern lv_obj_t* ui_WIFI_AP_Keyboard;          // AP keyboard object
// CUSTOM VARIABLES

extern bool WIFI_DIS_PWD;      // Flag for showing password, 1 for visible password
extern bool WIFI_AP_PWD;       // Flag for AP password visibility, 1 for visible password
extern int8_t WIFI_CONNECTION; // Flag for successful WIFI connection, stores position of connection in list
extern int wifi_index;         // Index of selected WIFI
extern uint8_t* wifi_pwd;      // Pointer to WIFI password
extern bool WIFI_CONNECTION_DONE;

extern lv_obj_t* ui_WIFI_SCAN_List; // WIFI scan list object
extern lv_obj_t* WIFI_List_Button;  // Button object for scanning WIFI

extern lv_obj_t* ui_WIFI_AP_MAC_List;      // AP MAC address list object
void ui_WIFI_list_event_cb(lv_event_t* e); // Event callback for WIFI list

// EVENTS

extern lv_obj_t* ui____initial_actions0; // Initial actions object

// IMAGES AND IMAGE SETS
LV_IMG_DECLARE(ui_img_log_on_png); // Image for 'log on' from assets/log on.png
LV_IMG_DECLARE(ui_img_wifi_png);   // Image for WIFI from assets/WIFI.png
LV_IMG_DECLARE(ui_img_485_png);    // Image for 485 from assets/485.png
LV_IMG_DECLARE(ui_img_can_png);    // Image for CAN from assets/CAN.png
LV_IMG_DECLARE(ui_img_pwm_png);    // Image for PWM from assets/PWM.png
LV_IMG_DECLARE(ui_img_eye_png);    // Image for eye (visibility toggle) from assets/eye.png
LV_IMG_DECLARE(ui_img_ok_png);     // Image for OK button from assets/OK.png
LV_IMG_DECLARE(ui_img_wifi_1_png); // Image for wifi level 1 from assets/wifi_1.png
LV_IMG_DECLARE(ui_img_wifi_2_png); // Image for wifi level 2 from assets/wifi_2.png
LV_IMG_DECLARE(ui_img_wifi_3_png); // Image for wifi level 3 from assets/wifi_3.png
LV_IMG_DECLARE(ui_img_wifi_4_png); // Image for wifi level 4 from assets/wifi_4.png

// FONTS
LV_FONT_DECLARE(ui_font_Chinese_Font); // Chinese font declaration

// UI INIT
void ui_init(void); // Function to initialize the UI

#ifdef __cplusplus
} /*extern "C"*/
#endif

#endif
