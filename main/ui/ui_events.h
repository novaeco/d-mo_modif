// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.5.0
// LVGL version: 8.3.11
// Project name: sq_ui

#ifndef _UI_EVENTS_H
#define _UI_EVENTS_H

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @brief User input event callback.
 * 
 * This function handles user input events, such as button presses or value changes.
 * It processes the event data passed via the lv_event_t structure.
 *
 * @param e The event structure containing the event data.
 */
void input_user_event_cb(lv_event_t * e);

/**
 * @brief Password input event callback.
 * 
 * This function handles password input events. It is triggered when a user interacts 
 * with the password input field.
 *
 * @param e The event structure containing the event data.
 */
void input_password_event_cb(lv_event_t * e);

/**
 * @brief New user event callback.
 * 
 * This function processes events related to creating a new user. It is triggered
 * during the user creation process in the UI.
 *
 * @param e The event structure containing the event data.
 */
void new_user_event_cb(lv_event_t * e);

/**
 * @brief New password event callback.
 * 
 * This function processes events related to setting a new password. It handles
 * the password creation process in the UI.
 *
 * @param e The event structure containing the event data.
 */
void mew_password_event_cb(lv_event_t * e);

/**
 * @brief RS485 send event callback.
 * 
 * This function is triggered when data is to be sent via the RS485 communication
 * interface. It processes the event and sends the necessary data.
 *
 * @param e The event structure containing the event data.
 */
void RS485Send(lv_event_t * e);

/**
 * @brief RS485 baud rate save event callback.
 * 
 * This function processes events to save the RS485 baud rate. It handles the
 * event triggered when the user saves the baud rate configuration.
 *
 * @param e The event structure containing the event data.
 */
void RS485Savebaud(lv_event_t * e);

/**
 * @brief RS485 clear event callback.
 * 
 * This function processes events to clear RS485-related data or settings.
 * It is triggered when the user clears data related to RS485 communication.
 *
 * @param e The event structure containing the event data.
 */
void RS485Clear(lv_event_t * e);

/**
 * @brief CAN send event callback.
 * 
 * This function processes events to send data via the CAN bus. It is triggered
 * when a user initiates sending data over the CAN interface.
 *
 * @param e The event structure containing the event data.
 */
void CANSend1(lv_event_t * e);

/**
 * @brief CAN baud rate save event callback.
 * 
 * This function processes events to save the CAN bus baud rate configuration.
 * It is triggered when the user saves the baud rate settings for CAN communication.
 *
 * @param e The event structure containing the event data.
 */
void CANSavebaud(lv_event_t * e);

/**
 * @brief CAN clear event callback.
 * 
 * This function processes events to clear CAN-related data or settings. It is
 * triggered when the user clears data related to CAN communication.
 *
 * @param e The event structure containing the event data.
 */
void CANClear(lv_event_t * e);

// Wi-Fi Control Functions
// These functions manage the Wi-Fi connection and its status

// Open/Enable Wi-Fi connection
void WIFIOPEN(lv_event_t * e);

// Close/Disable Wi-Fi connection
void WIFICLOSE(lv_event_t * e);

// Handle Wi-Fi connection (e.g., connect to a network with provided credentials)
void WIFIConnection(lv_event_t * e);


// Password Display Functions
// These functions manage the display of Wi-Fi passwords

// Access Point Wi-Fi Control Functions
// These functions are used to manage the device's Wi-Fi Access Point (AP) mode

// Open or start the Wi-Fi Access Point mode (turn the device into a hotspot)
void WIFIAPOPEN(lv_event_t * e);

// Close or stop the Wi-Fi Access Point mode (disable the hotspot)
void WIFIAPCLOSE(lv_event_t * e);

#ifdef __cplusplus
} /*extern "C"*/
#endif

#endif
